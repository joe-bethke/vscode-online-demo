# Copyright (c) Microsoft. All rights reserved.

# TODO: add SSL and remove port 80
# TODO: verify whether the resolver/DNS works (or has no impact) when running with Kubernetes
# TODO: remove logs or move outside of the container

daemon                off;
worker_processes      1;
error_log             /app/logs/error.log;
pid                   /app/logs/nginx.pid;
worker_rlimit_nofile  131072;

events {
    worker_connections 1024;
}

http {
    # Required so that nginx can resolve IPs when working with Docker Compose
    resolver 127.0.0.1 [::1]:5353 valid=1s ipv6=off; # DNS Cache time to 1s to allow for changes in Azds deployments. otherwise the dns caches

    # include /etc/nginx/mime.types;
    # default_type text/plain;
    large_client_header_buffers 4 32k;

    log_format upstreaminfo '$remote_addr - '
        '[$proxy_add_x_forwarded_for] - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" '
        '$request_length $request_time $upstream_addr $upstream_response_length $upstream_response_time $upstream_status';

    access_log /app/logs/access.log  upstreaminfo;
    error_log  /app/logs/error.log;

    server {
        listen              0.0.0.0:10080;

        proxy_http_version 1.1;



        server_name         reverseproxy 127.0.0.1;

        # Disable caching behavior for now
        # TODO: enable cache for static content later
        add_header Cache-Control "private";
        expires 1h;

        # when serving any content, include a X-Content-Type-Options: nosniff
        # header along with the Content-Type: header, to disable content-type
        # sniffing on some browsers.
        # add_header X-Content-Type-Options "nosniff" always;

        # Don't allow the browser to render the page inside a frame/iframe
        # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        # If you need [i]frames, use SAMEORIGIN or set an uri with ALLOW-FROM uri
        # See https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
        # add_header X-Frame-Options SAMEORIGIN always;
        large_client_header_buffers 4 32k;

        set $webui_endpoint             "http://webui:10080";
        # set $webui_endpoint             "http://storage-adapter-svc:9022";
        set $auth_endpoint              "http://auth:9001";
        set $iothubmanager_endpoint     "http://iothub-manager:80";
        set $devicesimulation_endpoint  "http://devicesimulation:9003";
        set $telemetry_endpoint         "http://telemetry:9004";
        set $config_endpoint            "http://config:80";
        set $diagnostics_endpoint       "http://diagnostics:9006";
        set $storage_endpoint           "http://storage-adapter-svc:9022";

        # add_header Access-Control-Allow-Credentials true always;
        # add_header Access-Control-Allow-Methods "GET, PUT, POST, DELETE, HEAD" always;
        # add_header Access-Control-Allow-Origin * always;

        # This is where there are preflight code that is injected into this configuration at docker run
        # For more information look at set_env.sh where youll see cors values being injected
        # {{INJECT_CORS_HERE}}
        proxy_pass_request_headers      on;

        location / {
            proxy_pass           "http://webui:10080";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
            # Public preview only: used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_buffering      off;
            client_max_body_size 0;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
        }

        location ~* ^/iothubmanager/(.*)$ {
            rewrite              ^/iothubmanager/(.*)$ /$1 break;
            proxy_pass           "http://iothub-manager:80";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
            # Public preview only: used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_buffering      off;
            client_max_body_size 0;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
            proxy_http_version 1.1;
            expires -1;
        }

        # location /devicesimulation/ {
        #     rewrite              /devicesimulation/(.*) /$1 break;
        #     proxy_pass           $devicesimulation_endpoint;
        #     proxy_pass_header    Authorization;
        #     # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
        #     # Public preview only: used to distinguish internal/external traffic
        #     #proxy_set_header     X-Source external;
        #     proxy_buffering      off;
        #     client_max_body_size 0;
        #     proxy_read_timeout   3600s;
        #     proxy_redirect       off;
        # }

        location ~* ^/telemetry/(.*)$ {
            rewrite              ^/telemetry/(.*)$ /$1 break;
            proxy_pass           "http://device-telemetry:80";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
            # Public preview only: used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_buffering      off;
            client_max_body_size 0;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
            expires -1;
        }

        location ~* ^/auth/(.*)$ {
            rewrite              ^/auth/(.*)$ /$1 break;
            proxy_pass           "http://identity-gateway:80";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
            # Public preview only: used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_set_header X-Forwarded-For https://$host/auth;
            proxy_buffering      on;
            client_max_body_size 0;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
            expires -1;
        }

        location ~ ^/config/(.*)$ {
            rewrite              ^/config/(.*)$ /$1 break;
            proxy_pass           "http://config:80";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
            # Public preview only: used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_buffering      off;
            client_max_body_size 200M;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
            expires -1;
        }

        location ~* ^/tenantmanager/(.*)$ {
            rewrite              ^/tenantmanager/(.*)$ /$1 break;
            proxy_pass           "http://tenant-manager:80";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # TODO ~devis: remove - https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet/issues/11
            # Public preview only: used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_buffering      off;
            client_max_body_size 200M;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
            expires -1;
        }

        location /diagnostics/ {
            rewrite              /diagnostics/(.*) /$1 break;
            proxy_pass           "http://diagnostics:80";
            proxy_pass_header    Authorization;
            proxy_pass_header    "azds-route-as";
            # Used to distinguish internal/external traffic
            proxy_set_header     X-Source external;
            proxy_buffering      off;
            client_max_body_size 0;
            proxy_read_timeout   3600s;
            proxy_redirect       off;
        }
    }
}
